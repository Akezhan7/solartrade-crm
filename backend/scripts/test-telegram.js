/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
 * –ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: node scripts/test-telegram.js
 */

require('dotenv').config();
const axios = require('axios');
const fs = require('fs');
const readline = require('readline');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
const telegramToken = process.env.TELEGRAM_BOT_TOKEN || process.env.TELEGRAM_TOKEN || '';
const telegramChatId = process.env.TELEGRAM_CHAT_ID || '';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
 */
async function checkConnection(token) {
  try {
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token.substring(0, 6)}...`);
    
    const url = `https://api.telegram.org/bot${token}/getMe`;
    const response = await axios.get(url);
    
    if (response.data && response.data.ok) {
      console.log(`\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!`);
      console.log(`ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:`);
      console.log(`   –ò–º—è: ${response.data.result.first_name}`);
      console.log(`   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${response.data.result.username}`);
      console.log(`   ID: ${response.data.result.id}`);
      return true;
    } else {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:`);
      console.error(response.data);
      return false;
    }
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:`);
    if (error.response) {
      console.error(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
    } else {
      console.error(`   ${error.message}`);
    }
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id
 */
async function checkChatId(token, chatId) {
  try {
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ chat_id: ${chatId}`);
    
    const url = `https://api.telegram.org/bot${token}/getChat`;
    const response = await axios.post(url, { chat_id: chatId });
    
    if (response.data && response.data.ok) {
      console.log(`\n‚úÖ Chat ID –≤–∞–ª–∏–¥–µ–Ω!`);
      console.log(`üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:`);
      
      if (response.data.result.type === 'private') {
        console.log(`   –¢–∏–ø: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç`);
        console.log(`   –ò–º—è: ${response.data.result.first_name} ${response.data.result.last_name || ''}`);
        console.log(`   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${response.data.result.username || '[–Ω–µ —É–∫–∞–∑–∞–Ω–æ]'}`);
      } else if (response.data.result.type === 'group' || response.data.result.type === 'supergroup') {
        console.log(`   –¢–∏–ø: ${response.data.result.type === 'group' ? '–ì—Ä—É–ø–ø–∞' : '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞'}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${response.data.result.title}`);
      } else if (response.data.result.type === 'channel') {
        console.log(`   –¢–∏–ø: –ö–∞–Ω–∞–ª`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${response.data.result.title}`);
      }
      
      return true;
    } else {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ chat_id:`);
      console.error(response.data);
      return false;
    }
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ chat_id:`);
    if (error.response) {
      console.error(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
    } else {
      console.error(`   ${error.message}`);
    }
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
async function sendTestMessage(token, chatId) {
  try {
    console.log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: ${chatId}`);
    
    const url = `https://api.telegram.org/bot${token}/sendMessage`;
    const message = `üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API
    
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}
üíª –•–æ—Å—Ç: ${require('os').hostname()}

<b>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</b>`;
    
    const response = await axios.post(url, {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });
    
    if (response.data && response.data.ok) {
      console.log(`\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
      console.log(`   Message ID: ${response.data.result.message_id}`);
      return true;
    } else {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`);
      console.error(response.data);
      return false;
    }
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`);
    if (error.response) {
      console.error(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
    } else {
      console.error(`   ${error.message}`);
    }
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('ü§ñ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram API');
  console.log('======================================\n');

  let token = telegramToken;
  let chatId = telegramChatId;

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
  if (!token) {
    token = await new Promise(resolve => {
      rl.question('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram: ', answer => {
        resolve(answer.trim());
      });
    });
  }

  if (!token) {
    console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –í—ã—Ö–æ–¥.');
    rl.close();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
  const connectionValid = await checkConnection(token);
  
  if (!connectionValid) {
    console.log('\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.');
    rl.close();
    return;
  }

  // –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
  if (!chatId) {
    chatId = await new Promise(resolve => {
      rl.question('\n–í–≤–µ–¥–∏—Ç–µ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ', answer => {
        resolve(answer.trim());
      });
    });
  }

  if (!chatId) {
    console.error('‚ùå Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω. –í—ã—Ö–æ–¥.');
    rl.close();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id
  const chatIdValid = await checkChatId(token, chatId);
  
  if (!chatIdValid) {
    console.log('\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ chat_id –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —á–∞—Ç–∞.');
    rl.close();
    return;
  }

  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const sendTest = await new Promise(resolve => {
    rl.question('\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? (y/n): ', answer => {
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
    });
  });

  if (sendTest) {
    await sendTestMessage(token, chatId);
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω
  const updateEnv = await new Promise(resolve => {
    rl.question('\n–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env? (y/n): ', answer => {
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
    });
  });

  if (updateEnv) {
    try {
      const envFile = '.env';
      let envContent = '';
      
      if (fs.existsSync(envFile)) {
        envContent = fs.readFileSync(envFile, 'utf8');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
      const envVars = envContent.split('\n');
      const updatedVars = [];
      let tokenUpdated = false;
      let chatIdUpdated = false;

      for (const line of envVars) {
        if (line.startsWith('TELEGRAM_BOT_TOKEN=') || line.startsWith('TELEGRAM_TOKEN=')) {
          if (!tokenUpdated) {
            updatedVars.push(`TELEGRAM_BOT_TOKEN=${token}`);
            tokenUpdated = true;
          }
        } else if (line.startsWith('TELEGRAM_CHAT_ID=')) {
          updatedVars.push(`TELEGRAM_CHAT_ID=${chatId}`);
          chatIdUpdated = true;
        } else if (line.trim() !== '') {
          updatedVars.push(line);
        }
      }

      if (!tokenUpdated) {
        updatedVars.push(`TELEGRAM_BOT_TOKEN=${token}`);
      }
      
      if (!chatIdUpdated) {
        updatedVars.push(`TELEGRAM_CHAT_ID=${chatId}`);
      }

      fs.writeFileSync(envFile, updatedVars.join('\n') + '\n');
      console.log('\n‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    } catch (error) {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ .env: ${error.message}`);
    }
  }

  console.log('\nüëã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  rl.close();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  console.error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  rl.close();
});
