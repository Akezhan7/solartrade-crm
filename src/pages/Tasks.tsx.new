import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  TextField, 
  Button, 
  IconButton, 
  InputAdornment,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid,
  CircularProgress,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Tab,
  Tabs,
  Card,
  CardContent,
  Chip,
  Stack,
  Switch,
  FormControlLabel,
  Snackbar,
  Alert,
  Divider,
  useMediaQuery,
  useTheme
} from '@mui/material';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import SearchIcon from '@mui/icons-material/Search';
import AddIcon from '@mui/icons-material/Add';
import FilterListIcon from '@mui/icons-material/FilterList';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { Task, TaskStatus, TaskPriority } from '../types';
import telegramService from '../utils/telegramService';
import apiService from '../utils/apiService';
import storageService from '../utils/storageService';
import { defaultUsers } from '../utils/realApiUsers';

// –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const taskStatusMap: Record<TaskStatus, { label: string; color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' }> = {
  NEW: { label: '–ù–æ–≤–∞—è', color: 'info' },
  IN_PROGRESS: { label: '–í —Ä–∞–±–æ—Ç–µ', color: 'warning' },
  COMPLETED: { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', color: 'success' },
  CANCELLED: { label: '–û—Ç–º–µ–Ω–µ–Ω–∞', color: 'error' },
  POSTPONED: { label: '–û—Ç–ª–æ–∂–µ–Ω–∞', color: 'default' }
};

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const taskPriorityMap: Record<TaskPriority, { label: string; color: string; icon: string }> = {
  LOW: { label: '–ù–∏–∑–∫–∏–π', color: '#2ECC71', icon: 'üü¢' },
  MEDIUM: { label: '–°—Ä–µ–¥–Ω–∏–π', color: '#F39C12', icon: 'üü†' },
  HIGH: { label: '–í—ã—Å–æ–∫–∏–π', color: '#E74C3C', icon: 'üî¥' }
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–¥–∞—á
interface TaskFilters {
  status: TaskStatus | 'ALL';
  assigneeId: string | 'ALL';
  priority: TaskPriority | 'ALL';
}

const Tasks: React.FC = () => {
  const navigate = useNavigate();
  const { id: taskId } = useParams<{ id: string }>();
  const location = useLocation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isSmallMobile = useMediaQuery('(max-width:360px)');
  
  const [loading, setLoading] = useState(true);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [tabValue, setTabValue] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');  
  const [filters, setFilters] = useState<TaskFilters>({
    status: 'ALL',
    assigneeId: 'ALL',
    priority: 'ALL'
  });
  const [openNewTaskDialog, setOpenNewTaskDialog] = useState(false);
  const [openTaskDetailsDialog, setOpenTaskDetailsDialog] = useState(false);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [sendTelegramNotification, setSendTelegramNotification] = useState(true);
  const [notificationSnackbar, setNotificationSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success' as 'success' | 'error' | 'info' | 'warning'
  });
  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    dueDate: '',
    priority: 'MEDIUM' as TaskPriority,
    assigneeId: '1',
    clientId: '',
    clientName: '',
    dealId: '',
    dealName: ''
  });
  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  const [tokenRefreshAttempted, setTokenRefreshAttempted] = useState(false);  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const [users, setUsers] = useState<any[]>([]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchTasksAndUsers = async () => {
      setLoading(true);
      try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ API
        const response = await apiService.getTasks();
        setTasks(response.data);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersResponse = await apiService.getUsers();
        setUsers(usersResponse.data);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –≤ URL –∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
        if (taskId) {
          try {
            const taskResponse = await apiService.getTask(taskId);
            setSelectedTask(taskResponse.data);
            setOpenTaskDetailsDialog(true);
          } catch (taskError) {
            console.error('Error fetching task details:', taskError);
            // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
            navigate('/tasks');
          }
        }
        
        setLoading(false);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —Å—Ä–æ–∫–æ–≤
        checkUpcomingDeadlines();
      } catch (error: any) {
        console.error('Error fetching tasks:', error);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏';
        let useMockData = false;
        
        if (error.response) {
          // –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          if (error.response.status === 401) {
            errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π';
            
            // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            if (!tokenRefreshAttempted) {
              setTokenRefreshAttempted(true);
              
              try {
                // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                const refreshed = await apiService.refreshToken();
                if (refreshed) {                  
                  // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                  fetchTasksAndUsers();
                  return;
                } else {
                  // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                  errorMessage = '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.';
                  storageService.clearAuth();
                  navigate('/login', { state: { from: location.pathname } });
                }
              } catch (refreshError) {
                // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                console.error('Token refresh failed', refreshError);
                storageService.clearAuth();
                navigate('/login', { state: { from: location.pathname } });
              }
            }
          } else if (error.response.status === 404) {
            errorMessage = '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ';
          } else if (error.response.data && error.response.data.message) {
            errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.data.message}`;
          } else {
            errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}`;
          }
        } else if (error.request) {
          // –ó–∞–ø—Ä–æ—Å –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        }
        
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        setTasks([]);
        setLoading(false);
        
        setNotificationSnackbar({
          open: true,
          message: errorMessage,
          severity: 'error'
        });
      }
    };

    fetchTasksAndUsers();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      setTokenRefreshAttempted(false);
    };
  }, [taskId, navigate, location.pathname]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
  const checkIfPastDue = (dateString: string): boolean => {
    const dueDate = new Date(dateString);
    const now = new Date();
    return dueDate < now && dueDate.toDateString() !== now.toDateString();
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —Å—Ä–æ–∫–æ–≤ –∑–∞–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const checkUpcomingDeadlines = () => {
    if (!telegramService.isBotConfigured()) return;
    
    const now = new Date();
    const activeTasks = tasks.filter(task => 
      task.status !== 'COMPLETED' && task.status !== 'CANCELLED'
    );
    
    activeTasks.forEach(task => {
      const dueDate = new Date(task.dueDate);
      const hoursRemaining = Math.round((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60));
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–¥–∞—á–∞—Ö, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å 24, 8 –∏–ª–∏ 2 —á–∞—Å–∞
      if (hoursRemaining > 0 && (hoursRemaining === 24 || hoursRemaining === 8 || hoursRemaining === 2)) {
        telegramService.sendDeadlineNotification({
          taskId: task.id,
          taskTitle: task.title,
          dueDate: task.dueDate,
          assigneeName: task.assigneeName,
          clientName: task.clientName || undefined
        }, hoursRemaining).then(result => {
          if (result.success) {
            console.log(`Sent deadline notification for task ${task.id}`);
          }
        });
      }
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const executeApiRequest = async <T,>(apiCall: () => Promise<T>): Promise<T> => {
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      return await apiCall();
    } catch (error: any) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (error.response && error.response.status === 401) {
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
          const refreshed = await apiService.refreshToken();
          if (refreshed) {
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            return await apiCall();
          } else {
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            storageService.clearAuth();
            navigate('/login', { state: { from: location.pathname } });
            throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
          }
        } catch (refreshError) {
          // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
          console.error('Token refresh failed', refreshError);
          storageService.clearAuth();
          navigate('/login', { state: { from: location.pathname } });
          throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      }
      // –ü–µ—Ä–µ–¥–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ
      throw error;
    }
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  };

  const handleFilterChange = (filterName: keyof TaskFilters, value: string) => {
    setFilters({
      ...filters,
      [filterName]: value
    });
  };

  const handleOpenNewTaskDialog = () => {
    setOpenNewTaskDialog(true);
  };
  
  const handleCloseNewTaskDialog = () => {
    setOpenNewTaskDialog(false);
    setNewTask({
      title: '',
      description: '',
      dueDate: '',
      priority: 'MEDIUM',
      assigneeId: '1',
      clientId: '',
      clientName: '',
      dealId: '',
      dealName: ''
    });
    setSendTelegramNotification(true);
  };

  const handleNewTaskChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewTask({
      ...newTask,
      [name]: value
    });
  };
  
  const handleCreateTask = async () => {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    const assigneeName = users.length > 0 
      ? users.find(user => user.id === newTask.assigneeId)?.name || '' 
      : defaultUsers.find(user => user.id === newTask.assigneeId)?.name || '';
    
    const newTaskData = {
      title: newTask.title,
      description: newTask.description,
      status: 'NEW' as TaskStatus,
      priority: (newTask.priority || 'MEDIUM') as TaskPriority,
      dueDate: newTask.dueDate,
      assigneeId: newTask.assigneeId,
      assigneeName: assigneeName,
      clientId: newTask.clientId || null,
      clientName: newTask.clientName || null,
      dealId: newTask.dealId || null,
      dealName: newTask.dealName || null,
      createdById: '1' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    };

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
      const response = await executeApiRequest(() => apiService.createTask(newTaskData));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
      setTasks([...tasks, response.data]);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
      if (sendTelegramNotification && telegramService.isBotConfigured()) {
        try {
          const result = await telegramService.sendNewTaskNotification({
            taskId: response.data.id,
            taskTitle: newTask.title,
            dueDate: newTask.dueDate,
            assigneeName: assigneeName,
            clientName: newTask.clientName || undefined
          });
          
          if (result.success) {
            setNotificationSnackbar({
              open: true,
              message: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram',
              severity: 'success'
            });
          } else {
            setNotificationSnackbar({
              open: true,
              message: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram',
              severity: 'warning'
            });
          }
        } catch (error) {
          console.error('Error sending Telegram notification:', error);
          setNotificationSnackbar({
            open: true,
            message: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            severity: 'warning'
          });
        }
      } else {
        setNotificationSnackbar({
          open: true,
          message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
          severity: 'success'
        });
      }
      
      handleCloseNewTaskDialog();
    } catch (error: any) {
      console.error('Error creating task:', error);
      
      setNotificationSnackbar({
        open: true,
        message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
        severity: 'error'
      });
    }
  };

  const handleOpenTaskDetails = (task: Task) => {
    setSelectedTask(task);
    setOpenTaskDetailsDialog(true);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–µ
    navigate(`/tasks/${task.id}`);
  };

  const handleCloseTaskDetailsDialog = () => {
    setOpenTaskDetailsDialog(false);
    setSelectedTask(null);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    navigate('/tasks');
  };

  const handleTaskStatusChange = async (taskId: string, newStatus: TaskStatus) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
      await executeApiRequest(() => apiService.updateTaskStatus(taskId, newStatus));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      const updatedTasks = tasks.map(task => 
        task.id === taskId 
          ? { ...task, status: newStatus, updatedAt: new Date().toISOString() } 
          : task
      );
      
      setTasks(updatedTasks);
      
      // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞—á–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –µ—ë
      if (selectedTask && selectedTask.id === taskId) {
        setSelectedTask({
          ...selectedTask,
          status: newStatus,
          updatedAt: new Date().toISOString()
        });
      }
      
      setNotificationSnackbar({
        open: true,
        message: `–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${taskStatusMap[newStatus].label}"`,
        severity: 'success'
      });
    } catch (error: any) {
      console.error('Error updating task status:', error);
      
      setNotificationSnackbar({
        open: true,
        message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
        severity: 'error'
      });
    }
  };
  
  const handleCloseSnackbar = () => {
    setNotificationSnackbar({
      ...notificationSnackbar,
      open: false
    });
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString: string) => {
    return format(new Date(dateString), "d MMMM yyyy '–≤' HH:mm", { locale: ru });
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
  const filteredTasks = tasks.filter(task => {
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤–∫–ª–∞–¥–∫–∏
    if (tabValue === 0 && (task.status === 'COMPLETED' || task.status === 'CANCELLED')) {
      return false;
    }
    if (tabValue === 1 && task.status !== 'COMPLETED' && task.status !== 'CANCELLED') {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (searchTerm && !task.title.toLowerCase().includes(searchTerm.toLowerCase()) && 
        !task.description.toLowerCase().includes(searchTerm.toLowerCase()) && 
        !(task.clientName && task.clientName.toLowerCase().includes(searchTerm.toLowerCase()))) {
      return false;
    }
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (filters.status !== 'ALL' && task.status !== filters.status) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É
    if (filters.assigneeId !== 'ALL' && task.assigneeId !== filters.assigneeId) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (filters.priority !== 'ALL' && task.priority !== filters.priority) {
      return false;
    }
    
    return true;
  });

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –¥–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const groupTasksByDueDate = (tasks: Task[]) => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const dayAfterTomorrow = new Date(today);
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);
    
    const nextWeek = new Date(today);
    nextWeek.setDate(nextWeek.getDate() + 7);
    
    return {
      overdue: tasks.filter(task => new Date(task.dueDate) < today),
      today: tasks.filter(task => {
        const dueDate = new Date(task.dueDate);
        return dueDate >= today && dueDate < tomorrow;
      }),
      tomorrow: tasks.filter(task => {
        const dueDate = new Date(task.dueDate);
        return dueDate >= tomorrow && dueDate < dayAfterTomorrow;
      }),
      thisWeek: tasks.filter(task => {
        const dueDate = new Date(task.dueDate);
        return dueDate >= dayAfterTomorrow && dueDate < nextWeek;
      }),
      later: tasks.filter(task => new Date(task.dueDate) >= nextWeek)
    };
  };

  const groupedTasks = groupTasksByDueDate(filteredTasks);

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">–ó–∞–¥–∞—á–∏</Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleOpenNewTaskDialog}
        >
          –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        </Button>
      </Box>

      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb:3 }}>
        <Tabs value={tabValue} onChange={handleTabChange}>
          <Tab label="–ê–∫—Ç–∏–≤–Ω—ã–µ" />
          <Tab label="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ" />
        </Tabs>
      </Box>

      <Paper sx={{ p: 2, mb: 3 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º"
              value={searchTerm}
              onChange={handleSearchChange}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                )
              }}
            />
          </Grid>
          <Grid item xs={12} md={3}>
            <FormControl fullWidth>
              <InputLabel id="status-filter-label">–°—Ç–∞—Ç—É—Å</InputLabel>
              <Select
                labelId="status-filter-label"
                value={filters.status}
                label="–°—Ç–∞—Ç—É—Å"
                onChange={(e) => handleFilterChange('status', e.target.value)}
              >
                <MenuItem value="ALL">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</MenuItem>
                <MenuItem value="NEW">–ù–æ–≤—ã–µ</MenuItem>
                <MenuItem value="IN_PROGRESS">–í —Ä–∞–±–æ—Ç–µ</MenuItem>
                <MenuItem value="COMPLETED">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ</MenuItem>
                <MenuItem value="CANCELLED">–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={3}>
            <FormControl fullWidth>
              <InputLabel id="assignee-filter-label">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</InputLabel>
              <Select
                labelId="assignee-filter-label"
                value={filters.assigneeId}
                label="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
                onChange={(e) => handleFilterChange('assigneeId', e.target.value)}
              >
                <MenuItem value="ALL">–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</MenuItem>
                {users.length > 0 ? users.map(user => (
                  <MenuItem key={user.id} value={user.id}>{user.name}</MenuItem>
                )) : defaultUsers.map(user => (
                  <MenuItem key={user.id} value={user.id}>{user.name}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={3}>
            <FormControl fullWidth>
              <InputLabel id="priority-filter-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</InputLabel>
              <Select
                labelId="priority-filter-label"
                value={filters.priority}
                label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                onChange={(e) => handleFilterChange('priority', e.target.value)}
              >
                <MenuItem value="ALL">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</MenuItem>
                <MenuItem value="HIGH">
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <Box component="span" sx={{ color: taskPriorityMap.HIGH.color, mr: 1, fontSize: '1.2rem' }}>‚óè</Box>
                    {taskPriorityMap.HIGH.label}
                  </Box>
                </MenuItem>
                <MenuItem value="MEDIUM">
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <Box component="span" sx={{ color: taskPriorityMap.MEDIUM.color, mr: 1, fontSize: '1.2rem' }}>‚óè</Box>
                    {taskPriorityMap.MEDIUM.label}
                  </Box>
                </MenuItem>
                <MenuItem value="LOW">
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <Box component="span" sx={{ color: taskPriorityMap.LOW.color, mr: 1, fontSize: '1.2rem' }}>‚óè</Box>
                    {taskPriorityMap.LOW.label}
                  </Box>
                </MenuItem>
              </Select>
            </FormControl>
          </Grid>
        </Grid>
      </Paper>

      {/* –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
      {groupedTasks.overdue.length > 0 && (
        <Box mb={4}>
          <Typography variant="h6" color="error" gutterBottom>
            –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
          </Typography>
          <Grid container spacing={2}>
            {groupedTasks.overdue.map((task) => (
              <Grid item xs={12} sm={6} md={4} key={task.id}>
                <Card 
                  sx={{ 
                    cursor: 'pointer',
                    borderLeft: '4px solid',
                    borderLeftColor: 'error.main',
                    '&:hover': { boxShadow: 6 } 
                  }}
                  onClick={() => handleOpenTaskDetails(task)}
                >
                  <CardContent>
                    <Typography variant="h6" gutterBottom noWrap>
                      {task.title}
                    </Typography>
                    <Typography variant="body2" color="textSecondary" sx={{ mb: 1 }} noWrap>
                      {task.description}
                    </Typography>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                      <Chip 
                        label={taskStatusMap[task.status].label} 
                        color={taskStatusMap[task.status].color} 
                        size="small" 
                      />
                      <Typography variant="body2" color="error">
                        –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞: {formatDate(task.dueDate)}
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Box 
                        component="span" 
                        sx={{ 
                          color: taskPriorityMap[task.priority || 'MEDIUM'].color, 
                          mr: 1, 
                          fontSize: '0.75rem', 
                          display: 'flex',
                          alignItems: 'center'
                        }}
                      >
                        ‚óè
                      </Box>
                      <Typography variant="body2" sx={{ fontSize: '0.75rem' }}>
                        {taskPriorityMap[task.priority || 'MEDIUM'].label} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                      </Typography>
                    </Box>
                    <Typography variant="body2">
                      {task.clientName ? `–ö–ª–∏–µ–Ω—Ç: ${task.clientName}` : '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'}
                    </Typography>
                    <Typography variant="body2">
                      –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task.assigneeName}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      {/* –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è */}
      {groupedTasks.today.length > 0 && (
        <Box mb={4}>
          <Typography variant="h6" color="primary" gutterBottom>
            –°–µ–≥–æ–¥–Ω—è
          </Typography>
          <Grid container spacing={2}>
            {groupedTasks.today.map((task) => (
              <Grid item xs={12} sm={6} md={4} key={task.id}>
                <Card 
                  sx={{ 
                    cursor: 'pointer',
                    borderLeft: '4px solid',
                    borderLeftColor: 'warning.main',
                    '&:hover': { boxShadow: 6 } 
                  }}
                  onClick={() => handleOpenTaskDetails(task)}
                >
                  <CardContent>
                    <Typography variant="h6" gutterBottom noWrap>
                      {task.title}
                    </Typography>
                    <Typography variant="body2" color="textSecondary" sx={{ mb: 1 }} noWrap>
                      {task.description}
                    </Typography>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                      <Chip 
                        label={taskStatusMap[task.status].label} 
                        color={taskStatusMap[task.status].color} 
                        size="small" 
                      />
                      <Typography variant="body2">
                        –°–µ–≥–æ–¥–Ω—è, {new Date(task.dueDate).toLocaleTimeString()}
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Box 
                        component="span" 
                        sx={{ 
                          color: taskPriorityMap[task.priority || 'MEDIUM'].color, 
                          mr: 1, 
                          fontSize: '0.75rem', 
                          display: 'flex',
                          alignItems: 'center'
                        }}
                      >
                        ‚óè
                      </Box>
                      <Typography variant="body2" sx={{ fontSize: '0.75rem' }}>
                        {taskPriorityMap[task.priority || 'MEDIUM'].label} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                      </Typography>
                    </Box>
                    <Typography variant="body2">
                      {task.clientName ? `–ö–ª–∏–µ–Ω—Ç: ${task.clientName}` : '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'}
                    </Typography>
                    <Typography variant="body2">
                      –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task.assigneeName}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      {/* –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ */}
      {groupedTasks.tomorrow.length > 0 && (
        <Box mb={4}>
          <Typography variant="h6" gutterBottom>
            –ó–∞–≤—Ç—Ä–∞
          </Typography>
          <Grid container spacing={2}>
            {groupedTasks.tomorrow.map((task) => (
              <Grid item xs={12} sm={6} md={4} key={task.id}>
                <Card 
                  sx={{ 
                    cursor: 'pointer', 
                    borderLeft: '4px solid',
                    borderLeftColor: 'info.main',
                    '&:hover': { boxShadow: 6 } 
                  }}
                  onClick={() => handleOpenTaskDetails(task)}
                >
                  <CardContent>
                    <Typography variant="h6" gutterBottom noWrap>
                      {task.title}
                    </Typography>
                    <Typography variant="body2" color="textSecondary" sx={{ mb: 1 }} noWrap>
                      {task.description}
                    </Typography>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                      <Chip 
                        label={taskStatusMap[task.status].label} 
                        color={taskStatusMap[task.status].color} 
                        size="small" 
                      />
                      <Typography variant="body2">
                        –ó–∞–≤—Ç—Ä–∞, {new Date(task.dueDate).toLocaleTimeString()}
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Box 
                        component="span" 
                        sx={{ 
                          color: taskPriorityMap[task.priority || 'MEDIUM'].color, 
                          mr: 1, 
                          fontSize: '0.75rem', 
                          display: 'flex',
                          alignItems: 'center'
                        }}
                      >
                        ‚óè
                      </Box>
                      <Typography variant="body2" sx={{ fontSize: '0.75rem' }}>
                        {taskPriorityMap[task.priority || 'MEDIUM'].label} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                      </Typography>
                    </Box>
                    <Typography variant="body2">
                      {task.clientName ? `–ö–ª–∏–µ–Ω—Ç: ${task.clientName}` : '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'}
                    </Typography>
                    <Typography variant="body2">
                      –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task.assigneeName}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      {/* –ó–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ */}
      {groupedTasks.thisWeek.length > 0 && (
        <Box mb={4}>
          <Typography variant="h6" gutterBottom>
            –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
          </Typography>
          <Grid container spacing={2}>
            {groupedTasks.thisWeek.map((task) => (
              <Grid item xs={12} sm={6} md={4} key={task.id}>
                <Card 
                  sx={{ 
                    cursor: 'pointer', 
                    borderLeft: '4px solid',
                    borderLeftColor: 'primary.main',
                    '&:hover': { boxShadow: 6 } 
                  }}
                  onClick={() => handleOpenTaskDetails(task)}
                >
                  <CardContent>
                    <Typography variant="h6" gutterBottom noWrap>
                      {task.title}
                    </Typography>
                    <Typography variant="body2" color="textSecondary" sx={{ mb: 1 }} noWrap>
                      {task.description}
                    </Typography>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                      <Chip 
                        label={taskStatusMap[task.status].label} 
                        color={taskStatusMap[task.status].color} 
                        size="small" 
                      />
                      <Typography variant="body2">
                        {formatDate(task.dueDate)}
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Box 
                        component="span" 
                        sx={{ 
                          color: taskPriorityMap[task.priority || 'MEDIUM'].color, 
                          mr: 1, 
                          fontSize: '0.75rem', 
                          display: 'flex',
                          alignItems: 'center'
                        }}
                      >
                        ‚óè
                      </Box>
                      <Typography variant="body2" sx={{ fontSize: '0.75rem' }}>
                        {taskPriorityMap[task.priority || 'MEDIUM'].label} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                      </Typography>
                    </Box>
                    <Typography variant="body2">
                      {task.clientName ? `–ö–ª–∏–µ–Ω—Ç: ${task.clientName}` : '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'}
                    </Typography>
                    <Typography variant="body2">
                      –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task.assigneeName}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      {/* –ó–∞–¥–∞—á–∏ –ø–æ–∑–¥–Ω–µ–µ */}
      {groupedTasks.later.length > 0 && (
        <Box mb={4}>
          <Typography variant="h6" gutterBottom>
            –ü–æ–∑–¥–Ω–µ–µ
          </Typography>
          <Grid container spacing={2}>
            {groupedTasks.later.map((task) => (
              <Grid item xs={12} sm={6} md={4} key={task.id}>
                <Card 
                  sx={{ 
                    cursor: 'pointer', 
                    borderLeft: '4px solid',
                    borderLeftColor: 'grey.500',
                    '&:hover': { boxShadow: 6 } 
                  }}
                  onClick={() => handleOpenTaskDetails(task)}
                >
                  <CardContent>
                    <Typography variant="h6" gutterBottom noWrap>
                      {task.title}
                    </Typography>
                    <Typography variant="body2" color="textSecondary" sx={{ mb: 1 }} noWrap>
                      {task.description}
                    </Typography>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                      <Chip 
                        label={taskStatusMap[task.status].label} 
                        color={taskStatusMap[task.status].color} 
                        size="small" 
                      />
                      <Typography variant="body2">
                        {formatDate(task.dueDate)}
                      </Typography>
                    </Box>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Box 
                        component="span" 
                        sx={{ 
                          color: taskPriorityMap[task.priority || 'MEDIUM'].color, 
                          mr: 1, 
                          fontSize: '0.75rem', 
                          display: 'flex',
                          alignItems: 'center'
                        }}
                      >
                        ‚óè
                      </Box>
                      <Typography variant="body2" sx={{ fontSize: '0.75rem' }}>
                        {taskPriorityMap[task.priority || 'MEDIUM'].label} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                      </Typography>
                    </Box>
                    <Typography variant="body2">
                      {task.clientName ? `–ö–ª–∏–µ–Ω—Ç: ${task.clientName}` : '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'}
                    </Typography>
                    <Typography variant="body2">
                      –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task.assigneeName}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      {filteredTasks.length === 0 && (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6" color="textSecondary">
            –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </Typography>
          <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
            –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
          </Typography>
        </Paper>
      )}

      {/* Dialog –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ */}
      <Dialog open={openNewTaskDialog} onClose={handleCloseNewTaskDialog} maxWidth="md" fullWidth>
        <DialogTitle>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                name="title"
                label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                fullWidth
                required
                value={newTask.title}
                onChange={handleNewTaskChange}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                name="description"
                label="–û–ø–∏—Å–∞–Ω–∏–µ"
                fullWidth
                multiline
                rows={3}
                value={newTask.description}
                onChange={handleNewTaskChange}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                name="dueDate"
                label="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                type="datetime-local"
                fullWidth
                required
                value={newTask.dueDate}
                onChange={handleNewTaskChange}
                InputLabelProps={{
                  shrink: true,
                }}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth required>
                <InputLabel id="assignee-label">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</InputLabel>
                <Select
                  labelId="assignee-label"
                  name="assigneeId"
                  value={newTask.assigneeId}
                  label="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π *"
                  onChange={handleNewTaskChange as any}
                >
                  {users.length > 0 ? users.map(user => (
                    <MenuItem key={user.id} value={user.id}>{user.name}</MenuItem>
                  )) : defaultUsers.map(user => (
                    <MenuItem key={user.id} value={user.id}>{user.name}</MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel id="priority-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</InputLabel>
                <Select
                  labelId="priority-label"
                  name="priority"
                  value={newTask.priority || 'MEDIUM'}
                  label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                  onChange={handleNewTaskChange as any}
                >
                  <MenuItem value="LOW">
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ color: taskPriorityMap.LOW.color, mr: 1, fontSize: '1.2rem' }}>‚óè</Box>
                      {taskPriorityMap.LOW.label}
                    </Box>
                  </MenuItem>
                  <MenuItem value="MEDIUM">
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ color: taskPriorityMap.MEDIUM.color, mr: 1, fontSize: '1.2rem' }}>‚óè</Box>
                      {taskPriorityMap.MEDIUM.label}
                    </Box>
                  </MenuItem>
                  <MenuItem value="HIGH">
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box component="span" sx={{ color: taskPriorityMap.HIGH.color, mr: 1, fontSize: '1.2rem' }}>‚óè</Box>
                      {taskPriorityMap.HIGH.label}
                    </Box>
                  </MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                name="clientName"
                label="–ö–ª–∏–µ–Ω—Ç"
                fullWidth
                value={newTask.clientName}
                onChange={handleNewTaskChange}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                name="dealName"
                label="–°–≤—è–∑–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞"
                fullWidth
                value={newTask.dealName}
                onChange={handleNewTaskChange}
              />
            </Grid>
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Switch 
                    checked={sendTelegramNotification}
                    onChange={(e) => setSendTelegramNotification(e.target.checked)}
                    color="primary"
                  />
                }
                label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseNewTaskDialog}>–û—Ç–º–µ–Ω–∞</Button>
          <Button 
            onClick={handleCreateTask} 
            variant="contained" 
            color="primary"
            disabled={!newTask.title.trim() || !newTask.dueDate}
          >
            –°–æ–∑–¥–∞—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ */}
      <Dialog open={openTaskDetailsDialog} onClose={handleCloseTaskDetailsDialog} maxWidth="md" fullWidth>
        {selectedTask && (
          <>
            <DialogTitle>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', flexWrap: 'wrap' }}>
                <Typography variant="h6" sx={{ mr: 2 }}>{selectedTask.title}</Typography>
                <Box sx={{ display: 'flex', gap: 1, mt: { xs: 1, sm: 0 } }}>
                  <Chip 
                    icon={
                      <Box 
                        component="span" 
                        sx={{ 
                          color: taskPriorityMap[selectedTask.priority || 'MEDIUM'].color,
                          fontSize: '1.2rem',
                          display: 'flex',
                          alignItems: 'center'
                        }}
                      >
                        ‚óè
                      </Box>
                    }
                    label={taskPriorityMap[selectedTask.priority || 'MEDIUM'].label}
                    size="small"
                    sx={{ mr: 1 }}
                  />
                  <Chip 
                    label={taskStatusMap[selectedTask.status].label} 
                    color={taskStatusMap[selectedTask.status].color} 
                    size="medium"
                  />
                </Box>
              </Box>
            </DialogTitle>
            <DialogContent>
              <Typography variant="body1" paragraph>
                {selectedTask.description}
              </Typography>
              
              <Box sx={{ mt: 3 }}>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" color="textSecondary">
                      –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    </Typography>
                    <Typography variant="body1" paragraph sx={{
                      color: checkIfPastDue(selectedTask.dueDate) ? 'error.main' : 'inherit'
                    }}>
                      {formatDate(selectedTask.dueDate)}
                      {checkIfPastDue(selectedTask.dueDate) && ' (–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞)'}
                    </Typography>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" color="textSecondary">
                      –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
                    </Typography>
                    <Typography variant="body1" paragraph>
                      {selectedTask.assigneeName}
                    </Typography>
                  </Grid>
                  
                  {selectedTask.clientName && (
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle2" color="textSecondary">
                        –ö–ª–∏–µ–Ω—Ç
                      </Typography>
                      <Typography variant="body1" paragraph>
                        {selectedTask.clientName}
                      </Typography>
                    </Grid>
                  )}
                  
                  {selectedTask.dealName && (
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle2" color="textSecondary">
                        –°–≤—è–∑–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞
                      </Typography>
                      <Typography variant="body1" paragraph>
                        {selectedTask.dealName}
                      </Typography>
                    </Grid>
                  )}
                  
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" color="textSecondary">
                      –°–æ–∑–¥–∞–Ω–∞
                    </Typography>
                    <Typography variant="body1" paragraph>
                      {formatDate(selectedTask.createdAt)}
                    </Typography>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Typography variant="subtitle2" color="textSecondary">
                      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    </Typography>
                    <Typography variant="body1">
                      {formatDate(selectedTask.updatedAt)}
                    </Typography>
                  </Grid>
                </Grid>
              </Box>
              
              <Divider sx={{ my: 3 }} />
              
              <Typography variant="subtitle1" gutterBottom>
                –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
              </Typography>
              <Stack direction="row" spacing={1} sx={{ mt: 1, flexWrap: 'wrap', gap: 1 }}>
                <Button 
                  variant={selectedTask.status === 'NEW' ? 'contained' : 'outlined'} 
                  color="info" 
                  onClick={() => handleTaskStatusChange(selectedTask.id, 'NEW')}
                  sx={{ mb: 1 }}
                >
                  –ù–æ–≤–∞—è
                </Button>
                <Button 
                  variant={selectedTask.status === 'IN_PROGRESS' ? 'contained' : 'outlined'} 
                  color="warning"
                  onClick={() => handleTaskStatusChange(selectedTask.id, 'IN_PROGRESS')}
                  sx={{ mb: 1 }}
                >
                  –í —Ä–∞–±–æ—Ç–µ
                </Button>
                <Button 
                  variant={selectedTask.status === 'COMPLETED' ? 'contained' : 'outlined'} 
                  color="success"
                  onClick={() => handleTaskStatusChange(selectedTask.id, 'COMPLETED')}
                  sx={{ mb: 1 }}
                >
                  –ó–∞–≤–µ—Ä—à–µ–Ω–∞
                </Button>
                <Button 
                  variant={selectedTask.status === 'CANCELLED' ? 'contained' : 'outlined'} 
                  color="error"
                  onClick={() => handleTaskStatusChange(selectedTask.id, 'CANCELLED')}
                  sx={{ mb: 1 }}
                >
                  –û—Ç–º–µ–Ω–µ–Ω–∞
                </Button>
                <Button 
                  variant={selectedTask.status === 'POSTPONED' ? 'contained' : 'outlined'} 
                  color="inherit"
                  onClick={() => handleTaskStatusChange(selectedTask.id, 'POSTPONED')}
                  sx={{ mb: 1 }}
                >
                  –û—Ç–ª–æ–∂–µ–Ω–∞
                </Button>
              </Stack>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleCloseTaskDetailsDialog}>–ó–∞–∫—Ä—ã—Ç—å</Button>
            </DialogActions>
          </>
        )}
      </Dialog>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
      <Snackbar 
        open={notificationSnackbar.open} 
        autoHideDuration={6000} 
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={notificationSnackbar.severity} sx={{ width: '100%' }}>
          {notificationSnackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default Tasks;
