import React, { useState, useEffect, useCallback } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  TextField, 
  Button, 
  IconButton, 
  InputAdornment,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid,
  CircularProgress,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Tab,
  Tabs,
  Card,
  CardContent,
  Chip,
  Stack,
  Switch,
  FormControlLabel,
  Snackbar,
  Alert,
  Divider,
  useMediaQuery,
  useTheme,
  Autocomplete,
  Fab,
  Badge,
  Avatar,
  Tooltip
} from '@mui/material';
import { useNavigate, useParams } from 'react-router-dom';
import SearchIcon from '@mui/icons-material/Search';
import AddIcon from '@mui/icons-material/Add';
import FilterListIcon from '@mui/icons-material/FilterList';
import PersonIcon from '@mui/icons-material/Person';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import FlagIcon from '@mui/icons-material/Flag';
import { format, isToday, isYesterday, addDays, isBefore, isAfter } from 'date-fns';
import { ru } from 'date-fns/locale';
import { Task, TaskStatus, TaskPriority } from '../types';
import telegramService from '../utils/telegramService';
import apiService from '../utils/apiService';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';

// –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const taskStatusMap: Record<TaskStatus, { label: string; color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' }> = {
  NEW: { label: '–ù–æ–≤–∞—è', color: 'info' },
  IN_PROGRESS: { label: '–í —Ä–∞–±–æ—Ç–µ', color: 'warning' },
  COMPLETED: { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', color: 'success' },
  CANCELLED: { label: '–û—Ç–º–µ–Ω–µ–Ω–∞', color: 'error' },
  POSTPONED: { label: '–û—Ç–ª–æ–∂–µ–Ω–∞', color: 'default' }
};

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const taskPriorityMap: Record<TaskPriority, { label: string; color: string; icon: string }> = {
  LOW: { label: '–ù–∏–∑–∫–∏–π', color: '#2ECC71', icon: 'üü¢' },
  MEDIUM: { label: '–°—Ä–µ–¥–Ω–∏–π', color: '#F39C12', icon: 'üü†' },
  HIGH: { label: '–í—ã—Å–æ–∫–∏–π', color: '#E74C3C', icon: 'üî¥' }
};

// –°—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const dealStatusMap: Record<string, { label: string; color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' }> = {
  NEW: { label: '–ù–æ–≤–∞—è', color: 'info' },
  NEGOTIATION: { label: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', color: 'primary' },
  PROPOSAL: { label: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', color: 'secondary' },
  AGREEMENT: { label: '–î–æ–≥–æ–≤–æ—Ä', color: 'info' },
  PAID: { label: '–û–ø–ª–∞—Ç–∞', color: 'warning' },
  INSTALLATION: { label: '–ú–æ–Ω—Ç–∞–∂', color: 'warning' },
  COMPLETED: { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', color: 'success' },
  CANCELLED: { label: '–û—Ç–º–µ–Ω–µ–Ω–∞', color: 'error' }
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–¥–∞—á
interface TaskFilters {
  status: TaskStatus | 'ALL';
  assigneeId: string | 'ALL';
  priority: TaskPriority | 'ALL';
}

// Use React.FC without explicit return type
const Tasks = (): JSX.Element => {
  const navigate = useNavigate();
  const { id: taskId } = useParams<{ id: string }>();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isSmallMobile = useMediaQuery('(max-width:360px)');
  
  const [loading, setLoading] = useState(true);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [tabValue, setTabValue] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');  
  const [filters, setFilters] = useState<TaskFilters>({
    status: 'ALL',
    assigneeId: 'ALL',
    priority: 'ALL'
  });
  const [openNewTaskDialog, setOpenNewTaskDialog] = useState(false);
  const [openTaskDetailsDialog, setOpenTaskDetailsDialog] = useState(false);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [users, setUsers] = useState<any[]>([]);
  const [clients, setClients] = useState<any[]>([]);
  const [deals, setDeals] = useState<any[]>([]);
  const [showFilters, setShowFilters] = useState(false);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const [taskForm, setTaskForm] = useState({
    title: '',
    description: '',
    status: 'NEW' as TaskStatus,
    priority: 'MEDIUM' as TaskPriority,
    dueDate: new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString(), // –ó–∞–≤—Ç—Ä–∞
    assigneeId: '',
    clientId: '',
    dealId: ''
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
  const [sendNotification, setSendNotification] = useState(true);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'success' as 'success' | 'error' | 'info' | 'warning'
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
  const fetchTasks = useCallback(async () => {
    setLoading(true);
    try {
      const tasksResponse = await apiService.getTasks();
      setTasks(tasksResponse);
      setLoading(false);
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏ –≤ URL, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏
      if (taskId) {
        const task = tasksResponse.find((t: Task) => t.id === taskId);
        if (task) {
          setSelectedTask(task);
          setOpenTaskDetailsDialog(true);
        }
      }
    } catch (error) {
      console.error('Error fetching tasks:', error);
      setLoading(false);
      setNotification({
        open: true,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á',
        severity: 'error'
      });
    }
  }, [taskId]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchTasks();
    fetchUsers();
    fetchClients();
    fetchDeals();
  }, [fetchTasks]);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
  const fetchUsers = async () => {
    try {
      const response = await apiService.getUsers();
      setUsers(response);
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
  const fetchClients = async () => {
    try {
      const response = await apiService.getClients();
      setClients(response);
    } catch (error) {
      console.error('Error fetching clients:', error);
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫
  const fetchDeals = async () => {
    try {
      const response = await apiService.getDeals();
      setDeals(response);
    } catch (error) {
      console.error('Error fetching deals:', error);
    }  };
  
  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleFilterChange = (field: keyof TaskFilters, value: any) => {
    setFilters({
      ...filters,
      [field]: value
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const handleTaskFormChange = (field: string, value: any) => {
    setTaskForm({
      ...taskForm,
      [field]: value
    });
  };
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const handleOpenNewTaskDialog = () => {
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
    
    setTaskForm({
      title: '',
      description: '',
      status: 'NEW',
      priority: 'MEDIUM',
      dueDate: new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString(), // –ó–∞–≤—Ç—Ä–∞
      assigneeId: currentUser.id || '',
      clientId: '',
      dealId: ''
    });
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    setSendNotification(true);
    
    setOpenNewTaskDialog(true);
  };
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const handleCloseNewTaskDialog = () => {
    setOpenNewTaskDialog(false);
  };
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const handleCreateTask = async () => {
    if (!taskForm.title || !taskForm.assigneeId || !taskForm.dueDate) {
      setNotification({
        open: true,
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        severity: 'error'
      });
      return;
    }
    
    try {
      await apiService.createTask(taskForm);
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞
      handleCloseNewTaskDialog();
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
      await fetchTasks();      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (sendNotification) {
        try {
          await telegramService.sendNewTaskNotification({
            taskId: 'new', // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            taskTitle: taskForm.title,
            dueDate: taskForm.dueDate,
            assigneeName: users.find(u => u.id === taskForm.assigneeId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            clientName: taskForm.clientId ? clients.find(c => c.id === taskForm.clientId)?.name || null : null,
            priority: taskForm.priority
          });
        } catch (telegramError) {
          console.warn('Failed to send Telegram notification:', telegramError);
        }
      } else {
        console.log('Telegram notification was disabled by user');
      }
      
      setNotification({
        open: true,
        message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
        severity: 'success'
      });
    } catch (error) {
      console.error('Error creating task:', error);
      setNotification({
        open: true,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
        severity: 'error'
      });
    }
  };
  
  // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
  const handleOpenTaskDetails = (task: Task) => {
    setSelectedTask(task);
    setOpenTaskDetailsDialog(true);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    navigate(`/tasks/${task.id}`, { replace: true });
  };
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
  const handleCloseTaskDetails = () => {
    setOpenTaskDetailsDialog(false);
    setSelectedTask(null);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    navigate('/tasks', { replace: true });
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  const handleChangeTaskStatus = async (task: Task, newStatus: TaskStatus) => {
    try {
      await apiService.updateTask(task.id, { status: newStatus });
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
      await fetchTasks();
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
      handleCloseTaskDetails();
      
      setNotification({
        open: true,
        message: '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω',
        severity: 'success'
      });
    } catch (error) {
      console.error('Error updating task status:', error);
      setNotification({
        open: true,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏',
        severity: 'error'
      });
    }
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatDate = (dateStr: string) => {
    try {
      const date = new Date(dateStr);
      if (isToday(date)) {
        return '–°–µ–≥–æ–¥–Ω—è, ' + format(date, 'HH:mm', { locale: ru });
      } else if (isYesterday(date)) {
        return '–í—á–µ—Ä–∞, ' + format(date, 'HH:mm', { locale: ru });
      } else if (isAfter(date, new Date()) && isBefore(date, addDays(new Date(), 7))) {
        return format(date, 'EEEE, HH:mm', { locale: ru });
      } else {
        return format(date, 'dd MMMM, HH:mm', { locale: ru });
      }
    } catch (e) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }
  };
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
  const getFilteredTasks = () => {
    let filteredTasks = [...tasks];
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (searchTerm.trim() !== '') {
      const search = searchTerm.toLowerCase();
      filteredTasks = filteredTasks.filter(task => 
        task.title.toLowerCase().includes(search) || 
        (task.description && task.description.toLowerCase().includes(search)) ||
        (task.clientName && task.clientName.toLowerCase().includes(search))
      );
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (filters.status !== 'ALL') {
      filteredTasks = filteredTasks.filter(task => task.status === filters.status);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    if (filters.assigneeId !== 'ALL') {
      filteredTasks = filteredTasks.filter(task => task.assigneeId === filters.assigneeId);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (filters.priority !== 'ALL') {
      filteredTasks = filteredTasks.filter(task => task.priority === filters.priority);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
    switch (tabValue) {
      case 0: // –í—Å–µ –∑–∞–¥–∞—á–∏
        break;
      case 1: // –ú–æ–∏ –∑–∞–¥–∞—á–∏
        const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
        filteredTasks = filteredTasks.filter(task => task.assigneeId === currentUser.id);
        break;
      case 2: // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
        filteredTasks = filteredTasks.filter(task => 
          task.status !== 'COMPLETED' && 
          task.status !== 'CANCELLED' &&
          new Date(task.dueDate) < new Date()
        );
        break;
      case 3: // –ù–∞ —Å–µ–≥–æ–¥–Ω—è
        filteredTasks = filteredTasks.filter(task => 
          task.status !== 'COMPLETED' && 
          task.status !== 'CANCELLED' &&
          isToday(new Date(task.dueDate))
        );
        break;
      case 4: // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        filteredTasks = filteredTasks.filter(task => task.status === 'COMPLETED');
        break;
    }
    
    return filteredTasks;
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
  const filteredTasks = getFilteredTasks();
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const handleCloseNotification = () => {
    setNotification({
      ...notification,
      open: false
    });
  };

  return (
    <Box sx={{ maxWidth: '100%', overflow: 'hidden' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center', 
          mb: 2,
          flexDirection: isMobile ? 'column' : 'row',
          gap: isMobile ? 2 : 0
        }}
      >
        <Typography 
          variant="h5" 
          sx={{ 
            fontWeight: 500,
            fontSize: { xs: '1.5rem', sm: '1.8rem' } 
          }}
        >
          –ó–∞–¥–∞—á–∏
        </Typography>
        <Box sx={{ display: 'flex', gap: 1, width: isMobile ? '100%' : 'auto' }}>
          <Button 
            variant="outlined" 
            color="primary" 
            onClick={() => setShowFilters(!showFilters)}
            startIcon={<FilterListIcon />}
            sx={{
              display: { xs: 'none', sm: 'flex' }
            }}
          >
            –§–∏–ª—å—Ç—Ä—ã
          </Button>
          {isMobile && (
            <IconButton onClick={() => setShowFilters(!showFilters)} color="primary">
              <FilterListIcon />
            </IconButton>
          )}
          <Button 
            variant="contained" 
            color="primary" 
            startIcon={isMobile ? null : <AddIcon />}
            onClick={handleOpenNewTaskDialog}
            sx={{ 
              flexGrow: isMobile ? 1 : 0,
              minWidth: isSmallMobile ? 'initial' : '150px',
              px: isSmallMobile ? 1 : 2
            }}
          >
            {isMobile ? <AddIcon /> : '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'}
          </Button>
        </Box>
      </Box>

      {/* –ü–æ–∏—Å–∫ */}
      <Box sx={{ mb: 2 }}>
        <TextField
          fullWidth
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç—É..."
          variant="outlined"
          value={searchTerm}
          onChange={handleSearchChange}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon />
              </InputAdornment>
            ),
          }}
          size={isMobile ? "small" : "medium"}
        />
      </Box>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      {showFilters && (
        <Paper sx={{ mb: 2, p: 2 }}>
          <Typography variant="subtitle1" gutterBottom>
            –§–∏–ª—å—Ç—Ä—ã –∑–∞–¥–∞—á
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth size={isMobile ? "small" : "medium"}>
                <InputLabel id="status-filter-label">–°—Ç–∞—Ç—É—Å</InputLabel>
                <Select
                  labelId="status-filter-label"
                  id="status-filter"
                  value={filters.status}
                  label="–°—Ç–∞—Ç—É—Å"
                  onChange={(e) => handleFilterChange('status', e.target.value)}
                >
                  <MenuItem value="ALL">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</MenuItem>
                  {Object.entries(taskStatusMap).map(([status, info]) => (
                    <MenuItem key={status} value={status}>
                      <Chip 
                        label={info.label}
                        size="small"
                        color={info.color}
                        sx={{ mr: 1 }}
                      />
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth size={isMobile ? "small" : "medium"}>
                <InputLabel id="assignee-filter-label">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</InputLabel>
                <Select
                  labelId="assignee-filter-label"
                  id="assignee-filter"
                  value={filters.assigneeId}
                  label="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                  onChange={(e) => handleFilterChange('assigneeId', e.target.value)}
                >
                  <MenuItem value="ALL">–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</MenuItem>
                  {users.map((user) => (
                    <MenuItem key={user.id} value={user.id}>{user.name}</MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth size={isMobile ? "small" : "medium"}>
                <InputLabel id="priority-filter-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</InputLabel>
                <Select
                  labelId="priority-filter-label"
                  id="priority-filter"
                  value={filters.priority}
                  label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                  onChange={(e) => handleFilterChange('priority', e.target.value)}
                >
                  <MenuItem value="ALL">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</MenuItem>
                  {Object.entries(taskPriorityMap).map(([priority, info]) => (
                    <MenuItem key={priority} value={priority}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          sx={{ 
                            width: 12, 
                            height: 12, 
                            borderRadius: '50%', 
                            bgcolor: info.color,
                            mr: 1
                          }} 
                        />
                        {info.label}
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        </Paper>
      )}

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange} 
          variant={isMobile ? "scrollable" : "standard"}
          scrollButtons={isMobile ? "auto" : false}
          allowScrollButtonsMobile
          aria-label="task tabs"
          sx={{
            '.MuiTab-root': {
              fontSize: isMobile ? '0.75rem' : '0.875rem',
              textTransform: 'none',
              minWidth: isMobile ? '80px' : '120px'
            }
          }}
        >
          <Tab label="–í—Å–µ –∑–∞–¥–∞—á–∏" />
          <Tab 
            label={
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Typography component="span">–ú–æ–∏ –∑–∞–¥–∞—á–∏</Typography>
                {isMobile ? null : (
                  <Badge style={{ marginLeft: 18 }}
                    badgeContent={tasks.filter(task => {
                      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
                      return task.assigneeId === currentUser.id && task.status !== 'COMPLETED' && task.status !== 'CANCELLED';
                    }).length} 
                    color="error" 
                    sx={{ ml: 1 }}
                  >
                    <Box />
                  </Badge>
                )}
              </Box>
            }
          />
          <Tab 
            label={
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <Typography component="span">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</Typography>
                {isMobile ? null : (
                  <Badge 
                    badgeContent={tasks.filter(task => 
                      task.status !== 'COMPLETED' && 
                      task.status !== 'CANCELLED' &&
                      new Date(task.dueDate) < new Date()
                    ).length} 
                    color="error" 
                    sx={{ ml: 1 }}
                  >
                    <Box />
                  </Badge>
                )}
              </Box>
            } 
          />
          <Tab label="–ù–∞ —Å–µ–≥–æ–¥–Ω—è" />
          <Tab label="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ" />
        </Tabs>
      </Box>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
      {loading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', p: 5 }}>
          <CircularProgress />
        </Box>
      ) : (
        <>
          {filteredTasks.length === 0 ? (
            <Paper sx={{ p: 4, textAlign: 'center' }}>
              <Typography variant="body1" color="textSecondary">
                –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </Typography>
              <Button 
                startIcon={<AddIcon />} 
                variant="outlined" 
                color="primary" 
                onClick={handleOpenNewTaskDialog}
                sx={{ mt: 2 }}
              >
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
              </Button>
            </Paper>
          ) : (
            <>
              {isMobile ? (
                // –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥ - –∫–∞—Ä—Ç–æ—á–∫–∏
                <Box sx={{ p: 0 }}>
                  <Stack spacing={2}>
                    {filteredTasks.map((task) => {
                      const statusInfo = taskStatusMap[task.status];
                      const priorityInfo = taskPriorityMap[task.priority];
                      const isOverdue = new Date(task.dueDate) < new Date() && task.status !== 'COMPLETED' && task.status !== 'CANCELLED';
                      
                      return (
                        <Card 
                          key={task.id} 
                          sx={{ 
                            borderRadius: '8px',
                            boxShadow: isOverdue ? `0 0 0 2px ${theme.palette.error.main}` : 'none'
                          }}
                          onClick={() => handleOpenTaskDetails(task)}
                        >
                          <CardContent sx={{ p: '14px' }}>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                              <Typography 
                                variant="body1" 
                                sx={{ 
                                  fontWeight: 500, 
                                  fontSize: '1rem',
                                  mb: 1,
                                  width: '70%',
                                  whiteSpace: 'nowrap',
                                  overflow: 'hidden',
                                  textOverflow: 'ellipsis'
                                }}
                              >
                                {task.title}
                              </Typography>
                              <Box>
                                <Tooltip title={priorityInfo.label}>
                                  <Box 
                                    sx={{ 
                                      width: 10,
                                      height: 10,
                                      borderRadius: '50%',
                                      backgroundColor: priorityInfo.color,
                                      display: 'inline-block'
                                    }} 
                                  />
                                </Tooltip>
                              </Box>
                            </Box>
                            
                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mb: 1 }}>
                              <Chip 
                                label={statusInfo.label} 
                                size="small" 
                                color={statusInfo.color} 
                                variant="outlined"
                                sx={{ height: 22 }}
                              />
                              <Chip 
                                icon={<CalendarTodayIcon sx={{ fontSize: '0.8rem' }} />}
                                label={formatDate(task.dueDate)}
                                size="small"
                                variant="outlined"
                                color={isOverdue ? "error" : "default"}
                                sx={{ height: 22, fontSize: '0.75rem' }}
                              />
                            </Box>
                            
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                              {task.clientName ? (
                                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                  <Avatar 
                                    sx={{ 
                                      width: 24, 
                                      height: 24, 
                                      mr: 1, 
                                      bgcolor: theme.palette.primary.main,
                                      fontSize: '0.75rem'
                                    }}
                                  >
                                    {task.clientName.charAt(0)}
                                  </Avatar>
                                  <Typography 
                                    variant="body2" 
                                    sx={{ 
                                      color: 'text.secondary',
                                      fontSize: '0.75rem',
                                      maxWidth: '130px',
                                      whiteSpace: 'nowrap',
                                      overflow: 'hidden',
                                      textOverflow: 'ellipsis'
                                    }}
                                  >
                                    {task.clientName}
                                  </Typography>
                                </Box>
                              ) : (
                                <Box />
                              )}
                              
                              <Typography 
                                variant="body2" 
                                sx={{ 
                                  color: 'text.secondary',
                                  fontSize: '0.75rem',
                                  fontStyle: 'italic'
                                }}
                              >
                                {task.assigneeName}
                              </Typography>
                            </Box>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </Stack>
                </Box>
              ) : (
                // –î–µ—Å–∫—Ç–æ–ø–Ω—ã–π –≤–∏–¥ - —Ç–∞–±–ª–∏—Ü–∞ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                <Grid container spacing={2}>
                  {filteredTasks.map((task) => {
                    const statusInfo = taskStatusMap[task.status];
                    const priorityInfo = taskPriorityMap[task.priority];
                    const isOverdue = new Date(task.dueDate) < new Date() && task.status !== 'COMPLETED' && task.status !== 'CANCELLED';
                    
                    return (
                      <Grid item xs={12} sm={6} md={4} lg={4} key={task.id}>
                        <Card 
                          sx={{ 
                            height: '100%', 
                            cursor: 'pointer',
                            transition: 'transform 0.2s, box-shadow 0.2s',
                            '&:hover': {
                              transform: 'translateY(-3px)',
                              boxShadow: 3
                            },
                            borderLeft: `4px solid ${priorityInfo.color}`,
                            boxShadow: isOverdue ? `0 0 0 1px ${theme.palette.error.main}` : 'none'
                          }}
                          onClick={() => handleOpenTaskDetails(task)}
                        >
                          <CardContent sx={{ p: 2 }}>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                              <Typography variant="h6" sx={{ fontSize: '1rem', fontWeight: 500 }}>
                                {task.title}
                              </Typography>
                              <Box sx={{ display: 'flex', gap: 0.5 }}>
                                <Tooltip title={priorityInfo.label}>
                                  <Box 
                                    sx={{ 
                                      width: 12,
                                      height: 12,
                                      borderRadius: '50%',
                                      backgroundColor: priorityInfo.color
                                    }} 
                                  />
                                </Tooltip>
                              </Box>
                            </Box>
                            
                            <Divider sx={{ my: 1 }} />
                            
                            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mb: 1.5 }}>
                              <Chip 
                                label={statusInfo.label} 
                                size="small" 
                                color={statusInfo.color} 
                                variant="outlined"
                              />
                              <Chip 
                                icon={<CalendarTodayIcon fontSize="small" />}
                                label={formatDate(task.dueDate)}
                                size="small"
                                variant="outlined"
                                color={isOverdue ? "error" : "default"}
                              />
                            </Box>
                            
                            {task.description && (
                              <Typography 
                                variant="body2" 
                                sx={{ 
                                  mb: 1.5,
                                  color: 'text.secondary',
                                  display: '-webkit-box',
                                  overflow: 'hidden',
                                  WebkitBoxOrient: 'vertical',
                                  WebkitLineClamp: 2,
                                  height: '40px'
                                }}
                              >
                                {task.description}
                              </Typography>
                            )}
                            
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                              {task.clientName ? (
                                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                  <Avatar 
                                    sx={{ 
                                      width: 24, 
                                      height: 24, 
                                      mr: 1, 
                                      bgcolor: theme.palette.primary.main,
                                      fontSize: '0.75rem'
                                    }}
                                  >
                                    {task.clientName.charAt(0)}
                                  </Avatar>
                                  <Typography 
                                    variant="body2" 
                                    sx={{ 
                                      color: 'text.secondary',
                                      maxWidth: '130px',
                                      whiteSpace: 'nowrap',
                                      overflow: 'hidden',
                                      textOverflow: 'ellipsis'
                                    }}
                                  >
                                    {task.clientName}
                                  </Typography>
                                </Box>
                              ) : (
                                <Box />
                              )}
                              
                              <Typography 
                                variant="body2" 
                                sx={{ 
                                  color: 'text.secondary',
                                  fontStyle: 'italic'
                                }}
                              >
                                {task.assigneeName}
                              </Typography>
                            </Box>
                          </CardContent>
                        </Card>
                      </Grid>
                    );
                  })}
                </Grid>
              )}
            </>
          )}
        </>
      )}
      
      {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      {isMobile && (
        <Fab 
          color="primary" 
          aria-label="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞" 
          onClick={handleOpenNewTaskDialog}
          sx={{ 
            position: 'fixed', 
            bottom: 16, 
            right: 16,
          }}
        >
          <AddIcon />
        </Fab>
      )}

      {/* –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ */}
      <Dialog 
        open={openNewTaskDialog} 
        onClose={handleCloseNewTaskDialog} 
        maxWidth="md" 
        fullWidth
        fullScreen={isMobile}
      >
        <DialogTitle>
          {isMobile ? (
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <IconButton 
                edge="start" 
                color="inherit" 
                onClick={handleCloseNewTaskDialog}
                sx={{ mr: 1 }}
              >
                <ChevronLeftIcon />
              </IconButton>
              <Typography variant="h6">–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</Typography>
            </Box>
          ) : (
            "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"
          )}
        </DialogTitle>
        <DialogContent dividers sx={{ p: isMobile ? 2 : 3 }}>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <TextField
                label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                variant="outlined"
                fullWidth
                required
                value={taskForm.title}
                onChange={(e) => handleTaskFormChange('title', e.target.value)}
                autoFocus={!isMobile}
                size={isMobile ? "small" : "medium"}
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                label="–û–ø–∏—Å–∞–Ω–∏–µ"
                variant="outlined"
                fullWidth
                multiline
                rows={3}
                value={taskForm.description}
                onChange={(e) => handleTaskFormChange('description', e.target.value)}
                size={isMobile ? "small" : "medium"}
              />
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth required size={isMobile ? "small" : "medium"}>
                <InputLabel id="priority-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</InputLabel>
                <Select
                  labelId="priority-label"
                  id="priority"
                  value={taskForm.priority}
                  label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                  onChange={(e) => handleTaskFormChange('priority', e.target.value)}
                >
                  {Object.entries(taskPriorityMap).map(([priority, info]) => (
                    <MenuItem key={priority} value={priority}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          sx={{ 
                            width: 12, 
                            height: 12, 
                            borderRadius: '50%', 
                            bgcolor: info.color,
                            mr: 1
                          }} 
                        />
                        {info.label}
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth required size={isMobile ? "small" : "medium"}>
                <InputLabel id="status-label">–°—Ç–∞—Ç—É—Å</InputLabel>
                <Select
                  labelId="status-label"
                  id="status"
                  value={taskForm.status}
                  label="–°—Ç–∞—Ç—É—Å"
                  onChange={(e) => handleTaskFormChange('status', e.target.value)}
                >
                  {Object.entries(taskStatusMap).map(([status, info]) => (
                    <MenuItem key={status} value={status}>
                      {info.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth required size={isMobile ? "small" : "medium"}>
                <DateTimePicker 
                  label="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                  value={new Date(taskForm.dueDate)}
                  onChange={(newValue) => {
                    if (newValue) {
                      handleTaskFormChange('dueDate', newValue.toISOString());
                    }
                  }}
                  slotProps={{ textField: { size: isMobile ? "small" : "medium" } }}
                />
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth required size={isMobile ? "small" : "medium"}>
                <InputLabel id="assignee-label">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</InputLabel>
                <Select
                  labelId="assignee-label"
                  id="assignee"
                  value={taskForm.assigneeId}
                  label="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                  onChange={(e) => handleTaskFormChange('assigneeId', e.target.value)}
                >
                  {users.map((user) => (
                    <MenuItem key={user.id} value={user.id}>{user.name}</MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
              <Grid item xs={12} sm={6}>              <Autocomplete
                id="client-select"
                options={clients}
                getOptionLabel={(option) => option.name || ''}
                value={clients.find(client => client.id === taskForm.clientId) || null}
                onChange={(_, newValue) => {
                  handleTaskFormChange('clientId', newValue?.id || '');
                  // –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –∫–ª–∏–µ–Ω—Ç
                  if (taskForm.dealId && taskForm.dealId !== '') {
                    handleTaskFormChange('dealId', '');
                  }
                }}
                clearOnBlur={false}
                clearOnEscape
                filterOptions={(options, state) => {
                  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏–ª–∏ email
                  const inputValue = state.inputValue.toLowerCase().trim();
                  return options.filter(client => 
                    client.id === '' || // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞—Ç—å "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
                    client.name.toLowerCase().includes(inputValue) || 
                    (client.phone && client.phone.toLowerCase().includes(inputValue)) ||
                    (client.email && client.email.toLowerCase().includes(inputValue))
                  );
                }}                renderOption={(props, option) => (
                  <li {...props}>
                    <div style={{ display: 'flex', flexDirection: 'column' }}>
                      <strong>{option.name}</strong>
                      <small>
                        {option.phone && `–¢–µ–ª: ${option.phone}`}
                        {option.email && option.phone && ' | '}
                        {option.email && `Email: ${option.email}`}
                      </small>
                    </div>
                  </li>
                )}                renderInput={(params) => <TextField 
                  {...params} 
                  label="–ö–ª–∏–µ–Ω—Ç" 
                  variant="outlined" 
                  size={isMobile ? "small" : "medium"}
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞"
                />}
              />
            </Grid>
              <Grid item xs={12} sm={6}>              <Autocomplete
                id="deal-select"
                options={deals.filter(deal => !taskForm.clientId || deal.clientId === taskForm.clientId)}
                getOptionLabel={(option) => option.title || ''}
                value={deals.find(deal => deal.id === taskForm.dealId) || null}
                onChange={(_, newValue) => {
                  handleTaskFormChange('dealId', newValue?.id || '');
                }}
                disabled={!taskForm.clientId} // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç
                clearOnBlur={false}
                clearOnEscape
                filterOptions={(options, state) => {
                  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
                  const inputValue = state.inputValue.toLowerCase().trim();
                  return options.filter(deal => 
                    deal.id === '' || // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞—Ç—å "–ù–µ—Ç —Å–¥–µ–ª–∫–∏"
                    deal.title.toLowerCase().includes(inputValue) ||
                    (deal.description && deal.description.toLowerCase().includes(inputValue))
                  );
                }}                renderOption={(props, option) => (
                  <li {...props}>
                    <div style={{ display: 'flex', flexDirection: 'column' }}>
                      <strong>{option.title}</strong>
                      {option.amount && (
                        <small>
                          {new Intl.NumberFormat('ru-RU', {
                            style: 'currency',
                            currency: 'RUB',
                            maximumFractionDigits: 0
                          }).format(option.amount)}
                          {option.status && ` ‚Ä¢ ${dealStatusMap[option.status]?.label || option.status}`}
                        </small>
                      )}
                    </div>
                  </li>
                )}                renderInput={(params) => <TextField 
                  {...params} 
                  label="–°–¥–µ–ª–∫–∞" 
                  variant="outlined" 
                  size={isMobile ? "small" : "medium"}
                  placeholder={taskForm.clientId ? "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É" : ""}
                  helperText={!taskForm.clientId ? "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞" : ""}
                />}
              />
            </Grid>
            
            <Grid item xs={12}>              <FormControlLabel
                control={
                  <Switch 
                    checked={sendNotification} 
                    onChange={(e) => setSendNotification(e.target.checked)}
                    color="primary"
                  />
                }
                label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 2 }}>
          <Button onClick={handleCloseNewTaskDialog}>–û—Ç–º–µ–Ω–∞</Button>
          <Button 
            onClick={handleCreateTask}
            variant="contained" 
            color="primary"
            disabled={!taskForm.title || !taskForm.assigneeId}
          >
            –°–æ–∑–¥–∞—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* –î–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏ */}
      {selectedTask && (
        <Dialog 
          open={openTaskDetailsDialog} 
          onClose={handleCloseTaskDetails} 
          maxWidth="md" 
          fullWidth
          fullScreen={isMobile}
        >
          <DialogTitle>
            {isMobile ? (
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <IconButton 
                  edge="start" 
                  color="inherit" 
                  onClick={handleCloseTaskDetails}
                  sx={{ mr: 1 }}
                >
                  <ChevronLeftIcon />
                </IconButton>
                <Typography variant="h6" sx={{ fontSize: '1.1rem' }}>
                  {selectedTask.title}
                </Typography>
              </Box>
            ) : (
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="h6">{selectedTask.title}</Typography>
                <Box>
                  <Chip 
                    label={taskStatusMap[selectedTask.status].label}
                    color={taskStatusMap[selectedTask.status].color}
                    variant="outlined"
                    size="small"
                  />
                </Box>
              </Box>
            )}
          </DialogTitle>
          <DialogContent dividers sx={{ p: isMobile ? 2 : 3 }}>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <FlagIcon sx={{ color: taskPriorityMap[selectedTask.priority].color, mr: 1 }} />
                  <Typography variant="body2">
                    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: <strong>{taskPriorityMap[selectedTask.priority].label}</strong>
                  </Typography>
                </Box>
                
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <AccessTimeIcon sx={{ mr: 1, color: 'text.secondary' }} />
                  <Typography variant="body2">
                    –°—Ä–æ–∫: <strong>{formatDate(selectedTask.dueDate)}</strong>
                    {new Date(selectedTask.dueDate) < new Date() && 
                     selectedTask.status !== 'COMPLETED' && 
                     selectedTask.status !== 'CANCELLED' && (
                      <Chip 
                        label="–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ" 
                        size="small" 
                        color="error" 
                        sx={{ ml: 1 }} 
                      />
                    )}
                  </Typography>
                </Box>
                
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <PersonIcon sx={{ mr: 1, color: 'text.secondary' }} />
                  <Typography variant="body2">
                    –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <strong>{selectedTask.assigneeName}</strong>
                  </Typography>
                </Box>
                
                {selectedTask.description && (
                  <Box sx={{ mb: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                      –û–ø–∏—Å–∞–Ω–∏–µ:
                    </Typography>
                    <Paper variant="outlined" sx={{ p: 1.5 }}>
                      <Typography variant="body2">
                        {selectedTask.description}
                      </Typography>
                    </Paper>
                  </Box>
                )}
                
                <Divider sx={{ my: 2 }} />
                
                <Grid container spacing={2}>
                  {selectedTask.clientName && (
                    <Grid item xs={12} sm={6}>
                      <Paper variant="outlined" sx={{ p: 1.5 }}>
                        <Typography variant="subtitle2" gutterBottom>
                          –ö–ª–∏–µ–Ω—Ç:
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Avatar 
                            sx={{ 
                              width: 24, 
                              height: 24, 
                              bgcolor: theme.palette.primary.main,
                              fontSize: '0.75rem',
                              mr: 1 
                            }}
                          >
                            {selectedTask.clientName.charAt(0)}
                          </Avatar>
                          <Typography variant="body2">
                            {selectedTask.clientName}
                          </Typography>
                        </Box>
                      </Paper>
                    </Grid>
                  )}
                  
                  {selectedTask.dealName && (
                    <Grid item xs={12} sm={6}>
                      <Paper variant="outlined" sx={{ p: 1.5 }}>
                        <Typography variant="subtitle2" gutterBottom>
                          –°–¥–µ–ª–∫–∞:
                        </Typography>
                        <Typography variant="body2">
                          {selectedTask.dealName}
                        </Typography>
                      </Paper>
                    </Grid>
                  )}
                </Grid>
              </Grid>
            </Grid>
          </DialogContent>
          <DialogActions sx={{ px: 3, pb: 2 }}>
            {selectedTask.status !== 'CANCELLED' && selectedTask.status !== 'COMPLETED' && (
              <>
                <Button 
                  onClick={() => handleChangeTaskStatus(selectedTask, 'COMPLETED')}
                  color="success"
                  variant="outlined"
                  sx={{ mr: 'auto' }}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å
                </Button>
                
                <Button 
                  onClick={() => handleChangeTaskStatus(selectedTask, 'CANCELLED')}
                  color="error"
                  variant="outlined"
                >
                  –û—Ç–º–µ–Ω–∏—Ç—å
                </Button>
              </>
            )}
            
            <Button 
              onClick={handleCloseTaskDetails}
              variant={selectedTask.status === 'CANCELLED' || selectedTask.status === 'COMPLETED' ? "contained" : "outlined"}
              color="primary"
            >
              {selectedTask.status === 'CANCELLED' || selectedTask.status === 'COMPLETED' ? '–ó–∞–∫—Ä—ã—Ç—å' : '–ù–∞–∑–∞–¥'}
            </Button>
          </DialogActions>
        </Dialog>
      )}
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–Ω–µ–∫–±–∞—Ä) */}
      <Snackbar 
        open={notification.open} 
        autoHideDuration={6000} 
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleCloseNotification} 
          severity={notification.severity} 
          sx={{ width: '100%' }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default Tasks;
