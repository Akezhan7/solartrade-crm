// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  position     String?
  password     String
  role         UserRole @default(SALES)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  tasks        Task[]   @relation("TaskAssignee")
  deals        Deal[]   @relation("DealManager")
  clients      Client[] @relation("ClientManager")
  createdTasks Task[]   @relation("TaskCreator")

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  SALES
}

model Client {
  id           String         @id @default(uuid())
  name         String
  phone        String
  email        String
  description  String?
  companyId    String?        @unique @map("company_id")
  company      ClientCompany? @relation(fields: [companyId], references: [id])
  contacts     Contact[]
  managerId    String         @map("manager_id")
  manager      User           @relation("ClientManager", fields: [managerId], references: [id])
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  tasks        Task[]
  deals        Deal[]
  interactions Interaction[]

  @@map("clients")
}

model Contact {
  id        String    @id @default(uuid())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  phone     String?
  email     String?
  birthDate DateTime? @map("birth_date")
  position  String?
  notes     String?
  clientId  String    @map("client_id")
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("client_contacts")
}

model ClientCompany {
  id          String   @id @default(uuid())
  name        String
  inn         String
  kpp         String?
  address     String
  bankDetails String?  @map("bank_details")
  client      Client?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("client_companies")
}

model Deal {
  id                   String     @id @default(uuid())
  title                String
  description          String?
  amount               Decimal    @default(0) @db.Decimal(10, 2)
  currency             String     @default("RUB")
  status               DealStatus @default(NEW)
  clientId             String     @map("client_id")
  client               Client     @relation(fields: [clientId], references: [id])
  managerId            String     @map("manager_id")
  manager              User       @relation("DealManager", fields: [managerId], references: [id])
  estimatedClosingDate DateTime?  @map("estimated_closing_date")
  actualClosingDate    DateTime?  @map("actual_closing_date")
  productInfo          String?    @map("product_info")
  probability          Int        @default(50)
  source               String?
  createdById          String     @map("created_by_id")
  createdAt            DateTime   @default(now()) @map("created_at")
  updatedAt            DateTime   @updatedAt @map("updated_at")
  tasks                Task[]

  @@map("deals")
}

enum DealStatus {
  NEW
  NEGOTIATION
  PROPOSAL
  AGREEMENT
  PAID
  INSTALLATION
  COMPLETED
  CANCELLED
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(NEW)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime     @map("due_date")
  assigneeId  String       @map("assignee_id")
  assignee    User         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  clientId    String?      @map("client_id")
  client      Client?      @relation(fields: [clientId], references: [id])
  dealId      String?      @map("deal_id")
  deal        Deal?        @relation(fields: [dealId], references: [id])
  createdById String       @map("created_by_id")
  createdBy   User         @relation("TaskCreator", fields: [createdById], references: [id])
  completedAt DateTime?    @map("completed_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("tasks")
}

enum TaskStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Interaction {
  id          String   @id @default(uuid())
  type        String
  content     String
  clientId    String   @map("client_id")
  client      Client   @relation(fields: [clientId], references: [id])
  createdById String   @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("interactions")
}

model TelegramSettings {
  id                  String   @id @default(uuid())
  botToken            String?  @map("bot_token")
  chatId              String?  @map("chat_id")
  notifyNewClients    Boolean  @default(true) @map("notify_new_clients")
  notifyNewDeals      Boolean  @default(true) @map("notify_new_deals")
  notifyNewTasks      Boolean  @default(true) @map("notify_new_tasks")
  notifyTaskDeadlines Boolean  @default(true) @map("notify_task_deadlines")
  taskReminderHours   Int[]    @default([24, 8, 2]) @map("task_reminder_hours")
  isActive            Boolean  @default(false) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("telegram_settings")
}
